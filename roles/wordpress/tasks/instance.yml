---

- name: Set facts
  ansible.builtin.set_fact:
    wordpress_dir: "{{ instance.dir }}{{ instance.vhost_dir | default(wordpress_vhost_dir) }}"

- name: Create wordpress home
  ansible.builtin.file:
    path: '{{ instance.dir }}'
    owner: '{{ wordpress_user_home }}'
    group: '{{ wordpress_group_home }}'
    mode: '{{ wordpress_mode_home }}'
    state: directory

- name: Include cli tasks
  ansible.builtin.include_tasks: instance_cli.yml

- name: Include mysql tasks
  ansible.builtin.include_tasks: instance_mysql.yml
  tags:
    - mysql

- name: Include install tasks
  ansible.builtin.include_tasks: instance_install.yml
  tags:
    - mysql

- name: Create wordpress directories for permissions - {{ instance.name }}
  ansible.builtin.file:
    path: '{{ instance.dir }}{{ item }}'
    state: directory
    recurse: true
  loop: '{{ instance.write_permissions | default([]) }}'

- name: Set wordpress permissions - {{ instance.name }}
  ansible.builtin.file:
    path: '{{ instance.dir }}{{ item }}'
    owner: '{{ wordpress_user }}'
    group: '{{ wordpress_group }}'
    recurse: true
  loop: '{{ instance.write_permissions | default([]) }}'

- name: Make sure tmp directory exists and permissions are correct - {{ instance.name }}
  ansible.builtin.file:
    path: '{{ instance.dir }}{{ instance.tmp_dir }}'
    owner: '{{ wordpress_user }}'
    group: '{{ wordpress_group }}'
    state: directory
    recurse: true
  when: instance.tmp_dir is defined

- name: Set uploads_path
  ansible.builtin.set_fact:
    uploads_path: "{{ instance.uploads_path | default(instance.dir + '/uploads') }}"

- name: Check if uploads directory exists - {{ instance.name }}
  ansible.builtin.file:
    path: '{{ uploads_path }}'
    state: directory
    recurse: true

- name: Set uploads_path permissions - {{ instance.name }}
  ansible.builtin.file:
    path: '{{ uploads_path }}'
    owner: '{{ wordpress_user }}'
    group: '{{ wordpress_group }}'
    recurse: true

- name: Include cli tasks
  ansible.builtin.include_tasks: instance_config.yml
  when: instance.write_settings_file | default(wordpress_write_settings_file)

- name: Check trusted TLS cert
  ansible.builtin.stat:
    path: /etc/ssl/certs/{{ instance.vhost_ssl_cert | default(vhost_ssl_cert) }}_trusted.crt
  register: trusted_cert
  when: nginx_with_ssl

- name: Set TLS files
  ansible.builtin.set_fact:
    vhost_ssl_with_trusted_cert: "{{ trusted_cert.stat.exists | bool }}"
  when:
    - nginx_with_ssl
    - instance.letsencrypt_cert is undefined or not instance.letsencrypt_cert

- name: Update wordpress vhosts configuration - {{ instance.name }}
  tags:
    - nginx
  ansible.builtin.template:
    src: etc/nginx/sites-available/wordpress.j2
    dest: /etc/nginx/sites-available/{{ instance.name }}.conf
    mode: 0644
  notify: Reload nginx

- name: Ensure wordpress vhosts is enabled - {{ instance.name }}
  tags:
    - nginx
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ instance.name }}.conf
    dest: /etc/nginx/sites-enabled/{{ instance.name }}.conf
    state: link
  notify: Reload nginx

  # restart required, because file can be not available before
- name: Protect wordpress vhost user - {{ instance.name }}
  tags:
    - nginx
  community.general.htpasswd:
    path: /etc/nginx/.htpasswd_wordpress_{{ instance.name }}
    name: '{{ item.user }}'
    password: '{{ item.password }}'
    owner: root
    group: '{{ nginx_group }}'
    mode: 0640
  loop: '{{ instance.vhost_users | default([]) }}'
  when: instance.vhost_users is defined
  notify: Restart nginx

- name: Remove htpasswd file, if no base auth is in use - {{ instance.name }}
  ansible.builtin.file:
    path: /etc/nginx/.htpasswd_wordpress_{{ instance.name }}
    state: absent
  when: instance.vhost_users is undefined
  notify: Restart nginx
