---
- name: Ensure default user is present
  community.mysql.mysql_user:
    login_unix_socket: "{{ mysql_socket if mysql_root_plugin == 'auth_socket' else omit }}"
    name: "{{ mysql_user_name }}"
    host: 'localhost'
    plugin: caching_sha2_password
    plugin_auth_string: "{{ mysql_user_password }}"
    salt: "{{ [ansible_machine_id, ansible_hostname, 'mysqlsecure'] | join | hash('sha1') | truncate(20, true, '') }}"
    priv: '*.*:ALL,GRANT'
    column_case_sensitive: true
    state: present
  when: mysql_user_name != mysql_root_username

# Has to be after the password assignment, for idempotency.
- name: Copy user-my.cnf file with password credentials
  ansible.builtin.template:
    src: user-my.cnf.j2
    dest: "{{ mysql_user_home }}/.my.cnf"
    owner: "{{ mysql_user_name }}"
    mode: '0600'
  vars:
    client_user: '{{ mysql_user_name }}'
    client_password: '{{ mysql_user_password }}'
  when:
    - mysql_user_name != mysql_root_username
    - mysql_install_packages | bool or mysql_user_password_update

- name: Disallow root login remotely
  ansible.builtin.command: '{{ mysql_daemon }} -NBe "{{ item }}"'
  loop:
    - DELETE FROM mysql.user WHERE User='{{ mysql_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false

- name: Update MySQL root passwords
  when:
    - mysql_root_password is defined
    - mysql_install_packages | bool or mysql_root_password | length > 0 or mysql_root_password_update
  block:
    - name: Get list of hosts for the root user
      community.mysql.mysql_query:
        login_unix_socket: "{{ mysql_socket if mysql_root_plugin == 'auth_socket' else omit }}"
        query: "SELECT Host FROM mysql.user WHERE User = %s ORDER BY Host"
        positional_args:
          - "{{ mysql_root_username }}"
      register: mysql_root_hosts_query
      changed_when: false
      check_mode: false

    - name: Update MySQL root password
      vars:
        db_salt: "{{ [ansible_machine_id, ansible_hostname, 'mysqlroot'] | join | hash('sha1') | truncate(20, true, '') }}"
        with_password: "{{ item.Host | string != 'localhost' or mysql_root_plugin != 'auth_socket' }}"
      community.mysql.mysql_user:
        login_unix_socket: "{{ mysql_socket if mysql_root_plugin == 'auth_socket' else omit }}"
        name: "{{ mysql_root_username }}"
        host: "{{ item.Host | default('localhost') }}"
        plugin: "{{ mysql_root_plugin if item.Host | string == 'localhost' else 'caching_sha2_password' }}"
        plugin_auth_string: "{{ mysql_root_password | default('') if with_password else omit }}"
        salt: "{{ db_salt if with_password else omit }}"
        column_case_sensitive: true
      loop: "{{ mysql_root_hosts_query.query_result[0] | default([]) }}"
      no_log: '{{ hide_sensitive_data }}'

    # Has to be after the root password assignment, for idempotency.
    - name: Copy .my.cnf file with root password credentials
      when: mysql_root_plugin != 'auth_socket'
      vars:
        client_user: '{{ mysql_root_username }}'
        client_password: "{{ mysql_root_password | default('') }}"
      ansible.builtin.template:
        src: user-my.cnf.j2
        dest: "{{ mysql_root_home }}/.my.cnf"
        owner: root
        group: root
        mode: '0600'

    - name: Remove .my.cnf with auth_socket
      when: mysql_root_plugin == 'auth_socket'
      ansible.builtin.file:
        path: "{{ mysql_root_home }}/.my.cnf"
        state: absent

- name: Get list of hosts for the anonymous user
  community.mysql.mysql_query:
    login_unix_socket: "{{ mysql_socket if mysql_root_plugin == 'auth_socket' else omit }}"
    query: "SELECT Host FROM mysql.user WHERE User = ''"
  register: mysql_anonymous_hosts_query
  changed_when: false
  check_mode: false

- name: Remove anonymous MySQL users
  community.mysql.mysql_user:
    login_unix_socket: "{{ mysql_socket if mysql_root_plugin == 'auth_socket' else omit }}"
    name: ""
    host: "{{ item.Host }}"
    state: absent
  loop: "{{ mysql_anonymous_hosts_query.query_result[0] | default([]) }}"

- name: Remove MySQL test database
  community.mysql.mysql_db:
    login_unix_socket: "{{ mysql_socket if mysql_root_plugin == 'auth_socket' else omit }}"
    name: 'test'
    state: absent
