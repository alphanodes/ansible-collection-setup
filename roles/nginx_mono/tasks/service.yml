---
# nginx_mono service configuration tasks
# This file handles individual service integration

- name: Validate service variables (no trailing semicolons in structured fields)
  ansible.builtin.include_tasks: service_vars.yml

- name: Check if multiple services would use reuseport without primary service set
  block:
    - name: Find existing vhost files with reuseport
      ansible.builtin.find:
        paths: /etc/nginx/sites-enabled
        patterns: "*.conf"
        excludes: "{{ nginx_mono_service_name }}.conf"
      register: existing_vhosts

    - name: Check if any existing vhost uses reuseport
      ansible.builtin.command: grep -l "listen.*reuseport" {{ item.path }}
      register: reuseport_check
      loop: "{{ existing_vhosts.files | default([]) }}"
      failed_when: false
      changed_when: false

    - name: Fail if multiple services need reuseport but no primary service is configured
      ansible.builtin.fail:
        msg: |
          ERROR: Multiple nginx services detected but no primary service configured!

          Found existing services with reuseport: {{ reuseport_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item.path') | map('basename') | map('regex_replace', '\\.conf$', '') | list }}
          Current service: {{ nginx_mono_service_name }}

          SOLUTION: Set the primary service for reuseport in your configuration:
          nginx_reuseport_primary_service: "grafana"  # or "loki" or "{{ nginx_mono_service_name }}"

          Only ONE service per server can use reuseport on the same port (443).
          This prevents nginx "duplicate listen options" errors.
      when:
        - nginx_with_reuseport | default(false)
        - nginx_reuseport_primary_service is not defined
        - reuseport_check.results | selectattr('rc', 'equalto', 0) | list | length > 0

- name: Calculate listen configuration for service
  ansible.builtin.include_tasks: calculate_listen_config.yml


- name: Setup Basic Auth for service
  community.general.htpasswd:
    path: "/etc/nginx/.htpasswd_{{ nginx_mono_service_name }}"
    name: '{{ item.user }}'
    password: '{{ item.password }}'
    owner: root
    group: '{{ nginx_group }}'
    mode: '0640'
  loop: '{{ nginx_mono_instance.vhost_users | default([]) }}'
  when:
    - nginx_mono_instance.vhost_users is defined
    - nginx_mono_instance.vhost_users | length > 0
  notify: Restart nginx

- name: Remove Basic Auth file if not used
  ansible.builtin.file:
    path: "/etc/nginx/.htpasswd_{{ nginx_mono_service_name }}"
    state: absent
  when:
    - nginx_mono_instance.vhost_users is undefined or nginx_mono_instance.vhost_users | length < 1
  notify: Restart nginx

- name: Create service vhost configuration
  tags: nginx
  ansible.builtin.template:
    src: vhost.j2
    dest: "/etc/nginx/sites-available/{{ nginx_mono_service_name }}.conf"
    mode: '0644'
  vars:
    instance: "{{ nginx_mono_instance }}"
  notify: Reload nginx

- name: Show rendered vhost configuration (debug)
  when: nginx_mono_show_vhost | bool
  block:
    - name: Read rendered vhost file
      ansible.builtin.slurp:
        src: "/etc/nginx/sites-available/{{ nginx_mono_service_name }}.conf"
      register: nginx_mono_vhost_dump

    - name: Prepare vhost text
      ansible.builtin.set_fact:
        nginx_mono_vhost_text: "{{ nginx_mono_vhost_dump.content | b64decode }}"

    - name: Debug vhost content (pretty, with newlines)
      ansible.builtin.debug:
        var: nginx_mono_vhost_text

- name: Enable service vhost
  tags: nginx
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ nginx_mono_service_name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ nginx_mono_service_name }}.conf"
    state: link
  notify: Reload nginx
  when: nginx_mono_service_enabled | default(true)

- name: Disable service vhost
  tags: nginx
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ nginx_mono_service_name }}.conf"
    state: absent
  notify: Reload nginx
  when: not (nginx_mono_service_enabled | default(true))
