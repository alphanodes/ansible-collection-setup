---

- name: Set activ_object_store_consolidated
  ansible.builtin.set_fact:
    activ_object_store_consolidated: "{{ gitlab_object_store_consolidated and gitlab_object_store_connection | length > 1 }}"

- name: Set gitlab_gem_home
  ansible.builtin.set_fact:
    gitlab_gem_home: "{{ gitlab_home }}/.gem/ruby/{{ gitlab_ruby_version }}"

- name: Set bundler path
  ansible.builtin.set_fact:
    bundler_path: "{{ gitlab_gem_home }}/bin:/usr/local/bin:/usr/bin:/bin"

- name: Set gitaly_socket_dir
  ansible.builtin.set_fact:
    gitaly_socket_dir: "{{ gitlab_path }}/tmp/sockets/private"

- name: Set gitaly_socket_path
  ansible.builtin.set_fact:
    gitaly_socket_path: "{{ gitaly_socket_dir }}/gitaly.socket"

- name: Include rsync role
  ansible.builtin.include_role:
    name: alphanodes.setup.rsync

- name: Include redis_server role
  ansible.builtin.include_role:
    name: alphanodes.setup.redis_server

- name: Include ssl role
  ansible.builtin.include_role:
    name: alphanodes.setup.ssl

- name: Include nginx role
  ansible.builtin.include_role:
    name: alphanodes.setup.nginx
    public: true
  vars:
    nginx_with_websocket: true

- name: Install required packages for gitlab
  ansible.builtin.apt:
    name: '{{ gitlab_packages }}'
    state: present
  become: true

- name: Include Git tasks
  ansible.builtin.include_tasks: git.yml

# disabled login, because not password is provided
- name: Ensure gitlab user is present
  ansible.builtin.user:
    name: "{{ gitlab_user }}"
    home: "{{ gitlab_home }}"
    comment: GitLab
    shell: '{{ "/usr/bin/zsh" if gitlab_with_zsh else "/usr/bin/bash" }}'
    state: present

- name: Configure ~/.profile
  ansible.builtin.template:
    src: 'profile.j2'
    dest: '{{ gitlab_home + "/.profile" }}'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0644

- name: Include zsh role
  ansible.builtin.include_role:
    name: alphanodes.setup.zsh
  vars:
    zsh_user: '{{ gitlab_user }}'
    zsh_with_setup: false
    zsh_with_rvm: '{{ gitlab_rvm_ruby and not gitlab_rvm_ruby_apt }}'
    zsh_with_ruby: true
    zsh_user_home: '{{ gitlab_home }}'
    zsh_local_exports:
      - name: RAILS_ENV
        value: '{{ gitlab_rails_env }}'
      - name: NODE_ENV
        value: '{{ gitlab_node_env }}'
      - name: NODE_OPTIONS
        value: '{{ gitlab_node_options }}'
      - name: PATH
        value: "{{ gitlab_workhorse_path }}:{{ gitlab_node_prefix }}/bin:$PATH"
  when: gitlab_with_zsh

- name: Include ruby tasks
  ansible.builtin.include_tasks: ruby.yml

- name: Add user to group rvm - {{ gitlab_user }}
  ansible.builtin.user:
    name: "{{ gitlab_user }}"
    groups: rvm
    append: true
  when:
    - gitlab_rvm_ruby
    - gitlab_rvm_ruby_apt

# @see https://gitlab.com/gitlab-org/gitlab-workhorse/-/issues/129
- name: Add redis and www-data to gitlab group
  ansible.builtin.user:
    name: '{{ gitlab_group }}'
    groups:
      - redis
      - www-data
    append: true

- name: Add git to www-data group
  ansible.builtin.user:
    name: www-data
    groups:
      - '{{ gitlab_user }}'
    append: true

- name: Ensure gitlab is latest
  ansible.builtin.git:
    repo: "{{ gitlab_ee_repository if gitlab_type == 'ee' else gitlab_ce_repository }}"
    dest: "{{ gitlab_path }}"
    version: "{{ gitlab_ee_version if gitlab_type == 'ee' else gitlab_ce_version }}"
    force: true
  become_user: "{{ gitlab_user }}"
  become: true
  register: gitlab_git_changed
  when: gitlab_update

- name: Include Go role
  ansible.builtin.include_role:
    name: alphanodes.setup.golang
  vars:
    golang_version: '{{ gitlab_go_version | default(omit) }}'
    golang_sha256_checksum: '{{ gitlab_go_sha256_checksum | default(omit) }}'

- name: Remove system yarnpkg is removed
  ansible.builtin.apt:
    name: yarnpkg
    state: absent
    purge: true

- name: Custom node.js installation
  ansible.builtin.include_role:
    name: alphanodes.setup.nodejs
  vars:
    nodejs_version: '{{ gitlab_nodejs_version }}'
    nodejs_install_npm_user: '{{ gitlab_nodejs_install_npm_user }}'
    nodejs_npm_global_packages: '{{ gitlab_nodejs_npm_global_packages }}'
    npm_config_prefix_root: '{{ gitlab_node_prefix }}'

- name: Configure database
  ansible.builtin.template:
    src: gitlab/database.yml.j2
    dest: '{{ gitlab_path }}/config/database.yml'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0600

- name: Get secrets file information
  ansible.builtin.stat:
    path: '{{ gitlab_path }}/config/secrets.yml'
  register: gitlab__secrets_exists

- name: Configure secrets
  ansible.builtin.template:
    src: gitlab/secrets.yml.j2
    dest: '{{ gitlab_path }}/config/secrets.yml'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0600
  when: not gitlab__secrets_exists.stat.exists

- name: Install bundler
  community.general.gem:
    name: bundler
    state: present
  become_user: '{{ gitlab_user }}'
  become: true
  when: not gitlab_rvm_ruby

- name: Run bundler commands
  become_user: "{{ gitlab_user }}"
  become: true
  environment:
    RAILS_ENV: '{{ gitlab_rails_env }}'
    PATH: '{{ bundler_path }}'
    GEM_HOME: '{{ gitlab_gem_home }}'
  block:
    # does not use home directory
    # - name: Configure bundler
    #   bundler:
    #     user_install: true
    #     deployment_mode: false
    #     executable: "{{ gitlab_rvm_ruby_path + '/bundle' if gitlab_rvm_ruby else gitlab_gem_home + '/bin/bundle' }}"
    #     chdir: '{{ gitlab_path }}'
    #     state: present
    #     exclude_groups:
    #       - development
    #       - test
    #       - mysql
    #       - aws
    #       - kerberos

    - name: Configure bundler - exclude groups
      ansible.builtin.command: bash -lc "bundle config without 'development test mysql aws kerberos'"

    - name: Configure bundler - Fix gpgme build
      ansible.builtin.command: bash -lc "bundle config build.gpgme --use-system-libraries"

    # - name: Configure bundler - path to bundle
    #  ansible.builtin.command: bash -lc "bundle config path {{ gitlab_rvm_ruby_path + '/bundle' if gitlab_rvm_ruby else gitlab_gem_home + '/bin/bundle' }}"

    - name: Running bundle install
      ansible.builtin.command: bash -lc "bundle install --jobs={{ ansible_processor_nproc }}"
      args:
        chdir: '{{ gitlab_path }}'

- name: Create upload directory
  ansible.builtin.file:
    path: '{{ gitlab_path }}/public/uploads'
    state: directory
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0700

- name: Create ci_secure_files directory
  ansible.builtin.file:
    path: '{{ gitlab_path }}/{{ gitlab_ci_secure_files_storage_path }}'
    state: directory
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0700
  when: gitlab_ci_secure_files_enabled

- name: Include backup tasks
  ansible.builtin.include_tasks: backup.yml

- name: Configure Gitlab
  ansible.builtin.template:
    src: gitlab/gitlab.yml.j2
    dest: '{{ gitlab_path }}/config/gitlab.yml'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0640
  notify:
    - Restart gitlab puma
    - Restart gitaly
    - Restart gitlab workhorse
    - Restart gitlab sidekiq

- name: Configure resque
  ansible.builtin.template:
    src: gitlab/resque.yml.j2
    dest: '{{ gitlab_path }}/config/resque.yml'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0640
  notify:
    - Restart gitlab puma
    - Restart gitaly
    - Restart gitlab workhorse
    - Restart gitlab sidekiq

- name: Configure cable
  ansible.builtin.template:
    src: gitlab/cable.yml.j2
    dest: '{{ gitlab_path }}/config/cable.yml'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0640
  notify:
    - Restart gitlab puma
    - Restart gitaly
    - Restart gitlab workhorse
    - Restart gitlab sidekiq

- name: Include git_config
  ansible.builtin.include_role:
    name: alphanodes.setup.git_config
  vars:
    git_config_user: "{{ gitlab_user }}"
    git_config_settings:
      - name: user.name
        value: '{{ gitlab_email_display_name }}'
      - name: user.email
        value: '{{ gitlab_email_from }}'
      - name: http.sslVerify
        value: 'false'

- name: Setup GitLab puma configuration
  ansible.builtin.template:
    src: 'gitlab/puma.rb.j2'
    dest: '{{ gitlab_path }}/config/puma.rb'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0644
  notify:
    - Restart gitlab
    - Restart gitlab.slice

- name: Setup GitLab rack_attack configuration
  ansible.builtin.template:
    src: 'gitlab/initializers/rack_attack.rb.j2'
    dest: '{{ gitlab_path }}/config/initializers/rack_attack.rb'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: 0644
  notify:
    - Restart gitlab
    - Restart gitlab.slice

- name: Install GitLab systemd service files
  ansible.builtin.template:
    src: 'etc/systemd/system/{{ item }}.j2'
    dest: '/etc/systemd/system/{{ item }}'
    mode: 0644
  loop:
    - gitlab.target
    - gitlab.slice
    - gitlab-puma.service
    - gitlab-gitaly.service
    - gitlab-workhorse.service
    - gitlab-sidekiq.service
    - gitlab-mailroom.service
  notify:
    - Reload systemd daemon

- name: Install GitLab Pages systemd service file
  ansible.builtin.template:
    src: etc/systemd/system/gitlab-pages.service.j2
    dest: /etc/systemd/system/gitlab-pages.service
    mode: 0644
  register: gitlab__systemd_page_file
  when: gitlab_pages_enabled
  notify:
    - Reload systemd daemon

- name: Flush all handlers at this point
  ansible.builtin.meta: flush_handlers

- name: Check if setup has already run
  community.postgresql.postgresql_query:
    db: '{{ gitlab_db_name }}'
    query: SELECT COUNT(*) as id FROM information_schema.tables WHERE table_schema = 'public'
    login_user: '{{ gitlab_user }}'
  register: gitlab_setup_run

- name: Include gitlab shell tasks
  ansible.builtin.include_tasks: gitlab_shell.yml

- name: Include gitlab workhorse tasks
  ansible.builtin.include_tasks: gitlab_workhorse.yml

- name: Include gitlab pages tasks
  ansible.builtin.include_tasks: gitlab_pages.yml
  when: gitlab_pages_enabled

- name: Include gitlab remove pages tasks
  ansible.builtin.include_tasks: gitlab_remove_pages.yml
  when: not gitlab_pages_enabled

- name: Include gitlab gitaly tasks
  ansible.builtin.include_tasks: gitlab_gitaly.yml

- name: Running install tasks
  when: (gitlab_setup_run.query_result[0].id | int) == 0
  become_user: "{{ gitlab_user }}"
  become: true
  environment:
    RAILS_ENV: '{{ gitlab_rails_env }}'
    NODE_ENV: '{{ gitlab_node_env }}'
    NODE_OPTIONS: '{{ gitlab_node_options }}'
    GITLAB_ROOT_EMAIL: '{{ gitlab_root_email }}'
    GITLAB_ROOT_PASSWORD: '{{ gitlab_root_password }}'
  block:
    - name: Make sure gitaly is running - required for gitlab:setup
      ansible.builtin.systemd:
        name: gitlab-gitaly
        state: started
        enabled: true
      retries: 3
      delay: 10

    - name: Running gitlab:setup
      ansible.builtin.command: bash -lc "bundle exec rake gitlab:setup force=yes"
      args:
        chdir: '{{ gitlab_path }}'

    - name: Run yarn install
      ansible.builtin.command: bash -lc "yarn install --production --pure-lockfile"
      args:
        chdir: '{{ gitlab_path }}'

    - name: Compile Assets
      ansible.builtin.command: bash -lc "bundle exec rake gitlab:assets:compile"
      args:
        chdir: '{{ gitlab_path }}'

- name: Stop puma on update for more memory if required
  ansible.builtin.systemd:
    name: gitlab-puma
    state: stopped
    enabled: true
  when: gitlab_stop_puma_for_update

# NO_SOURCEMAPS is required for memory problems, see https://gitlab.com/gitlab-org/gitlab-ce/issues/50937#note_107752251
- name: Running update tasks
  when: (gitlab_setup_run.query_result[0].id | int) != 0
  become_user: "{{ gitlab_user }}"
  become: true
  environment:
    RAILS_ENV: '{{ gitlab_rails_env }}'
    NODE_ENV: '{{ gitlab_node_env | default(omit) }}'
    NODE_OPTIONS: '{{ gitlab_node_options }}'
  block:
    - name: Running migration update
      ansible.builtin.command: bash -lc "bundle exec rake db:migrate"
      args:
        chdir: '{{ gitlab_path }}'

    - name: Running cache clear
      ansible.builtin.command: bash -lc "bundle exec rake cache:clear"
      args:
        chdir: '{{ gitlab_path }}'

    - name: Update node dependencies
      ansible.builtin.command: bash -lc "yarn install --pure-lockfile"
      args:
        chdir: '{{ gitlab_path }}'

    - name: Recompile assets
      ansible.builtin.command: bash -lc "bundle exec rake gitlab:assets:clean gitlab:assets:compile"
      args:
        chdir: '{{ gitlab_path }}'

# should stick direct after update (because it is stopped manually)
- name: Ensure all services are started and enabled
  ansible.builtin.systemd:
    name: '{{ item }}'
    state: started
    enabled: true
  loop:
    - gitlab-puma
    - gitlab-workhorse
    - gitlab-gitaly
    - gitlab-sidekiq

# this is done with gitlab:assets:compile, see https://gitlab.com/gitlab-org/gitlab/-/commit/acde682b867411adf5daaec9c49e7a0186f8b8ef
# - name: Compile GetText PO files
#   ansible.builtin.command: bash -lc "bundle exec rake gettext:compile"
#   args:
#     chdir: '{{ gitlab_path }}'
#   become_user: "{{ gitlab_user }}"
#   become: true
#   environment:
#     RAILS_ENV: '{{ gitlab_rails_env }}'

- name: Enable GitLab systemd services
  ansible.builtin.systemd:
    name: gitlab.target
    enabled: true
    state: started

- name: Setup GitLab logrotate configuration
  ansible.builtin.template:
    src: etc/logrotate.d/gitlab.j2
    dest: /etc/logrotate.d/gitlab
    owner: root
    group: root
    mode: 0644

- name: Include nginx tasks
  ansible.builtin.include_tasks: nginx.yml
  tags:
    - nginx
