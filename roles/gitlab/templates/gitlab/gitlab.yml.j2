{{ ansible_managed | comment }}
# # # # # # # # # # # # # # # # # #
# GitLab application config file  #
# # # # # # # # # # # # # # # # # #

production: &base
  #
  # 1. GitLab app settings
  # ==========================

  ## GitLab settings
  gitlab:
    ## Web server settings (note: host is the FQDN, do not include http://)
    host: {{ gitlab_vhost_server }}
    port: {{ gitlab_vhost_port }} # Set to 443 if using HTTPS, see installation.md#using-https for additional HTTPS configuration details
    https: {{ 'true' if gitlab_vhost_ssl else 'false' }} # Set to true if using HTTPS, see installation.md#using-https for additional HTTPS configuration details

    # Uncomment this line below if your ssh host is different from HTTP/HTTPS one
    # (you'd obviously need to replace ssh.host_example.com with your own host).
    # Otherwise, ssh host will be set to the `host:` value above
    # ssh_host: ssh.host_example.com

    # Relative URL support
    # WARNING: We recommend using an FQDN to host GitLab in a root path instead
    # of using a relative URL.
    # Documentation: http://doc.gitlab.com/ce/install/relative_url.html
    # Uncomment and customize the following line to run in a non-root path
    #
    # relative_url_root: /gitlab

    allowed_hosts: []

    # Trusted Proxies
    # Customize if you have GitLab behind a reverse proxy which is running on a different machine.
    # Add the IP address for your reverse proxy to the list, otherwise users will appear signed in from that address.
    trusted_proxies:
      # Examples:
      #- 192.168.1.0/24
      #- 192.168.2.1
      #- 2001:0db8::/32

    # Uncomment and customize if you can't use the default user to run GitLab (default: 'git')
    user: {{ gitlab_user }}

    ## Date & Time settings
    # Uncomment and customize if you want to change the default time zone of GitLab application.
    # To see all available zones, run `bundle exec rake time:zones:all RAILS_ENV=production`
    # time_zone: 'UTC'

    ## Email settings
    # Uncomment and set to false if you need to disable email sending from GitLab (default: true)
    # email_enabled: true
    # Email address used in the "From" field in mails sent by GitLab
    email_from: '{{ gitlab_email_from }}'
    email_display_name: '{{ gitlab_email_display_name }}'
    email_reply_to: '{{ gitlab_email_reply_to }}'
    email_subject_suffix: ''

    # Email server smtp settings are in config/initializers/smtp_settings.rb.sample

    # default_can_create_group: false  # default: true
    # username_changing_enabled: false # default: true - User can change her username/namespace
    ## Default theme ID
    ##   1 - Indigo
    ##   2 - Gray
    ##   3 - Light Gray
    ##   4 - Blue
    ##   5 - Green
    ##   6 - Light Indigo
    ##   7 - Light Blue
    ##   8 - Light Green
    ##   9 - Red
    ##   10 - Light Red
    ##   11 - Dark Mode (alpha)
    default_theme: {{ gitlab_default_theme }}

    ## Automatic issue closing
    # If a commit message matches this regular expression, all issues referenced from the matched text will be closed.
    # This happens when the commit is pushed or merged into the default branch of a project.
    # When not specified the default issue_closing_pattern as specified below will be used.
    # Tip: you can test your closing pattern at http://rubular.com.
    # issue_closing_pattern: '\b((?:[Cc]los(?:e[sd]?|ing)|\b[Ff]ix(?:e[sd]|ing)?|\b[Rr]esolv(?:e[sd]?|ing)|\b[Ii]mplement(?:s|ed|ing)?)(:?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?)|([A-Z][A-Z0-9_]+-\d+))+)'

    ## Default project features settings
    default_projects_features:
      {{ gitlab_default_projects_features | to_nice_yaml(indent=2) | trim | indent(6) }}

    ## Webhook settings
    # Number of seconds to wait for HTTP response after sending webhook HTTP POST request (default: 10)
    # webhook_timeout: 10

    ### GraphQL Settings
    # Tells the rails application how long it has to complete a GraphQL request.
    # We suggest this value to be higher than the database timeout value
    # and lower than the worker timeout set in Puma. (default: 30)
    # graphql_timeout: 30

    ## Repository downloads directory
    # When a user clicks e.g. 'Download zip' on a project, a temporary zip file is created in the following directory.
    # The default is 'shared/cache/archive/' relative to the root of the Rails app.
    # repository_downloads_path: shared/cache/archive/

    ## Impersonation settings
    impersonation_enabled: true

    ## Disable jQuery and CSS animations
    # disable_animations: true

    ## Application settings cache expiry in seconds (default: 60)
    # application_settings_cache_seconds: 60

    ## Print initial root password to stdout during initialization (default: false)
    # WARNING: setting this to true means that the root password will be printed in
    # plaintext. This can be a security risk.
    # display_initial_root_password: false

  # Allows delivery of emails using Microsoft Graph API with OAuth 2.0 client credentials flow.
  microsoft_graph_mailer:
    enabled: false
    # The unique identifier for the user. To use Microsoft Graph on behalf of the user.
    # user_id: "YOUR-USER-ID"
    # The directory tenant the application plans to operate against, in GUID or domain-name format.
    # tenant: "YOUR-TENANT-ID"
    # The application ID that's assigned to your app. You can find this information in the portal where you registered your app.
    # client_id: "YOUR-CLIENT-ID"
    # The client secret that you generated for your app in the app registration portal.
    # client_secret: "YOUR-CLIENT-SECRET-ID"
    # Defaults to "https://login.microsoftonline.com".
    # azure_ad_endpoint:
    # Defaults to "https://graph.microsoft.com".
    # graph_endpoint:

  ## Reply by email
  # Allow users to comment on issues and merge requests by replying to notification emails.
  # For documentation on how to set this up, see https://docs.gitlab.com/ee/administration/reply_by_email.html
  incoming_email:
    enabled: false

    # The email address including the `%{key}` placeholder that will be replaced to reference the item being replied to.
    # The placeholder can be omitted but if present, it must appear in the "user" part of the address (before the `@`).
    address: "gitlab-incoming+%{key}@gmail.com"

    # Email account username
    # With third party providers, this is usually the full email address.
    # With self-hosted email servers, this is usually the user part of the email address.
    user: "gitlab-incoming@gmail.com"
    # Email account password
    password: "[REDACTED]"

    # IMAP server host
    host: "imap.gmail.com"
    # IMAP server port
    port: 993
    # Whether the IMAP server uses SSL
    ssl: true
    # Whether the IMAP server uses StartTLS
    start_tls: false

    # The mailbox where incoming mail will end up. Usually "inbox".
    mailbox: "inbox"
    # The IDLE command timeout.
    idle_timeout: 60
    # The log file path for the structured log file.
    # Since `mail_room` is run independently of Rails, an absolute path is preferred.
    # The default is 'log/mail_room_json.log' relative to the root of the Rails app.
    #
    # log_path: log/mail_room_json.log

    # If you are using Microsoft Graph instead of IMAP, set this to false to retain
    # messages in the inbox since deleted messages are auto-expunged after some time.
    delete_after_delivery: true

    # Whether to expunge (permanently remove) messages from the mailbox when they are marked as deleted after delivery
    # Only applies to IMAP. Microsoft Graph will auto-expunge any deleted messages.
    expunge_deleted: false

    # For Microsoft Graph support
    # inbox_method: microsoft_graph
    # inbox_options:
    #   tenant_id: "YOUR-TENANT-ID"
    #   client_id: "YOUR-CLIENT-ID"
    #   client_secret: "YOUR-CLIENT-SECRET"

    # How mailroom delivers email content to Rails. There are two methods at the moment:
    # - sidekiq: mailroom pushes the email content to Sidekiq directly. This job
    # is then picked up by Sidekiq.
    # - webhook: mailroom triggers a HTTP POST request to Rails web server. The
    # content is embedded into the request body.
    # Default is sidekiq.
    # delivery_method: sidekiq

    # When the delivery method is webhook, those configs tell the url that
    # mailroom can contact to. Note that the combined url must not end with "/".
    # At the moment, the webhook delivery method doesn't support HTTP/HTTPs via
    # UNIX socket.
    # gitlab_url: "http://gitlab.example"

    # When the delivery method is webhook, this config is the file that
    # contains the shared secret key for verifying access for mailroom's
    # incoming_email.
    # Default is '.gitlab_mailroom_secret' relative to Rails.root (i.e. root of the GitLab app).
    # secret_file: /home/git/gitlab/.gitlab_mailroom_secret

    # File location to read encrypted incoming email secrets from
    # encrypted_secret_file: /mnt/gitlab/smtp.yaml.enc
    # Default: shared/encrypted_settings/incoming_email.yaml.enc

{% if activ_object_store_consolidated %}
  ## Consolidated object store config
  ## This will only take effect if the object_store sections are not defined
  ## within the types (e.g. artifacts, lfs, etc.).
  object_store:
    enabled: true
    proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
    connection:
      {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(6) }}
    objects:
      artifacts:
        enabled: {{ 'true' if gitlab_artifacts_object_store else 'false' }}
        bucket: {{ gitlab_artifacts_object_store_bucket }}
      external_diffs:
        enabled: {{ 'true' if gitlab_external_diffs_object_store else 'false' }}
        bucket: {{ gitlab_external_diffs_object_store_bucket }}
      lfs:
        enabled: {{ 'true' if gitlab_lfs_object_store else 'false' }}
        bucket: {{ gitlab_lfs_object_store_bucket }}
      uploads:
        enabled: {{ 'true' if gitlab_uploads_object_store else 'false' }}
        bucket: {{ gitlab_uploads_object_store_bucket }}
      packages:
        enabled: {{ 'true' if gitlab_packages_object_store else 'false' }}
        bucket: {{ gitlab_packages_object_store_bucket }}
      dependency_proxy:
        enabled: {{ 'true' if gitlab_dependency_proxy_object_store else 'false' }}
        bucket: {{ gitlab_dependency_proxy_object_store_bucket }}
      terraform_state:
        enabled: {{ 'true' if gitlab_terraform_object_store else 'false' }}
        bucket: {{ gitlab_terraform_object_store_bucket }}
      pages:
        enabled: {{ 'true' if gitlab_pages_object_store else 'false' }}
        bucket: {{ gitlab_pages_object_store_bucket }}
{% endif %}

  ## Build Artifacts
  artifacts:
    enabled: {{ 'true' if gitlab_artifacts_enabled else 'false' }}
    # The location where build artifacts are stored (default: shared/artifacts).
    # path: shared/artifacts
    path: '{{ gitlab_artifacts_storage_path }}'
{% if not activ_object_store_consolidated and gitlab_artifacts_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_artifacts_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}

  ## Merge request external diff storage
  external_diffs:
    # If disabled (the default), the diffs are in-database. Otherwise, they can
    # be stored on disk, or in object storage
    enabled: {{ 'true' if gitlab_external_diffs_enabled else 'false' }}
{% if not activ_object_store_consolidated and gitlab_external_diffs_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_external_diffs_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}

  ## Git LFS
  lfs:
    enabled: {{ 'true' if gitlab_lfs_enabled else 'false' }}
    # The location where LFS objects are stored (default: shared/lfs-objects).
    storage_path: {{ gitlab_lfs_storage_path }}
{% if not activ_object_store_consolidated and gitlab_lfs_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_lfs_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}

  ## Uploads (attachments, avatars, etc...)
  uploads:
    # The location where uploads objects are stored (default: public/).
    # storage_path: public/
    storage_path: {{ gitlab_uploads_storage_path }}
    # base_dir: uploads/-/system
{% if not activ_object_store_consolidated and gitlab_uploads_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_uploads_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}

  ## Packages (maven repository, npm registry, etc...)
  packages:
    enabled: {{ 'true' if gitlab_packages_enabled else 'false' }}
    ##
    ## The location where build packages are stored (default: shared/packages).
    ##
    # storage_path: shared/packages
    storage_path: {{ gitlab_packages_storage_path }}
{% if not activ_object_store_consolidated and gitlab_packages_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_packages_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}

  ## CI Secure Files
  ci_secure_files:
    enabled: {{ 'true' if gitlab_ci_secure_files_enabled else 'false' }}
    storage_path: {{ gitlab_ci_secure_files_storage_path }}
{% if not activ_object_store_consolidated and gitlab_ci_secure_files_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_ci_secure_files_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}

    object_store:
      enabled: false
      remote_directory: ci-secure-files # The bucket name
      connection:
        provider: AWS
        aws_access_key_id: AWS_ACCESS_KEY_ID
        aws_secret_access_key: AWS_SECRET_ACCESS_KEY
        region: us-east-1
        # host: 'localhost' # default: s3.amazonaws.com
        # endpoint: 'http://127.0.0.1:9000' # default: nil
        # aws_signature_version: 4 # For creation of signed URLs. Set to 2 if provider does not support v4.
        # path_style: true # Use 'host/bucket_name/object' instead of 'bucket_name.host/object'

  ## GitLab Pages
  pages:
    enabled: {{ 'true' if gitlab_pages_enabled else 'false' }}
    access_control: {{ 'true' if gitlab_pages_access_control else 'false' }}
    # The location where pages are stored (default: shared/pages).
    path: '{{ gitlab_pages_storage_path }}'
    # The domain under which the pages are served:
    host: {{ gitlab_pages_domain }}
    port: {{ gitlab_pages_port_public }}
    https: {{ 'true' if gitlab_pages_ssl else 'false' }}
    artifacts_server: {{ 'true' if gitlab_pages_artifacts_server else 'false' }}
{% if not gitlab_pages_ssl %}
    external_http: ["127.0.0.1:{{ gitlab_pages_port }}"]
{% endif %}
{% if not activ_object_store_consolidated and gitlab_pages_object_store %}
    object_store:
      enabled: true
      remote_directory: {{ gitlab_pages_object_store_bucket }}
      proxy_download: {{ 'true' if gitlab_object_store_proxy_download else 'false' }}
      connection:
        {{ gitlab_object_store_connection | to_nice_yaml(indent=2) | trim | indent(8) }}
{% endif %}
{% if gitlab_pages_local_storage %}
    local_store:
      enabled: true
      # The location where pages are stored (default: shared/pages).
      path: '{{ gitlab_pages_storage_path }}'
    # namespace_in_path: false # Set to true if you want to enable namespace in the URL path. It requires pages nginx to be enabled.
{% endif %}

  issues_tracker:
    redmine:
      title: "Redmine"
      project_url: "{{ gitlab_redmine_url }}/projects/redmine_identifier"
      issues_url: "{{ gitlab_redmine_url }}/issues/:id"
      new_issue_url: "{{ gitlab_redmine_url }}/projects/redmine_identifier/issues/new"

  ## Mattermost
  ## For enabling Add to Mattermost button
  mattermost:
    enabled: {{ gitlab_mattermost_enabled }}
    host: '{{ gitlab_mattermost_host }}'

  ## Jira connect
  ## To switch to a Jira connect development environment
  jira_connect:
    # atlassian_js_url: 'http://localhost:9292/atlassian.js'
    # enforce_jira_base_url_https: false
    # additional_iframe_ancestors: ['localhost:*']

  ## Gravatar
  ## If using gravatar.com, there's nothing to change here. For Libravatar
  ## you'll need to provide the custom URLs. For more information,
  ## see: https://docs.gitlab.com/ee/customization/libravatar.html
  gravatar:
    # Gravatar/Libravatar URLs: possible placeholders: %{hash} %{size} %{email} %{username}
    # plain_url: "http://..."     # default: https://www.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon
    # ssl_url:   "https://..."    # default: https://secure.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon

  ## Sidekiq
  sidekiq:
    log_format: {{ gitlab_sidekiq_log_format }} # (text is the original format)
    # An array of tuples indicating the rules for re-routing a worker to a
    # desirable queue before scheduling. For example:
    # routing_rules:
    #   - ["resource_boundary=cpu", "cpu_boundary"]
    #   - ["feature_category=pages", null]
    #   - ["*", "default"]

  ## Auxiliary jobs
  # Periodically executed jobs, to self-heal GitLab, do external synchronizations, etc.
  # Please read here for more information: https://github.com/ondrejbartas/sidekiq-cron#adding-cron-job
  cron_jobs:
    # Interval, in seconds, for each Sidekiq process to check for scheduled cron jobs that need to be enqueued. If not
    # set, the interval scales dynamically with the number of Sidekiq processes. If set to 0, disable polling for cron
    # jobs entirely.
    # poll_interval: 30

    # Flag stuck CI jobs as failed
    stuck_ci_jobs_worker:
      cron: "0 * * * *"
    # Execute scheduled triggers
    pipeline_schedule_worker:
      cron: "3-59/10 * * * *"
    # Remove expired build artifacts
    expire_build_artifacts_worker:
      cron: "*/7 * * * *"
    # Remove expired pipeline artifacts
    ci_pipelines_expire_artifacts_worker:
      cron: "*/23 * * * *"
    # Remove files from object storage
    ci_schedule_delete_objects_worker:
      cron: "*/16 * * * *"
    # Stop expired environments
    environments_auto_stop_cron_worker:
      cron: "24 * * * *"
    # Delete stopped environments
    environments_auto_delete_cron_worker:
      cron: "34 * * * *"
    # Periodically run 'git fsck' on all repositories. If started more than
    # once per hour you will have concurrent 'git fsck' jobs.
    repository_check_worker:
      cron: "20 * * * *"
    # Archive live traces which have not been archived yet
    ci_archive_traces_cron_worker:
      cron: "17 * * * *"
    # Send admin emails once a week
    admin_email_worker:
      cron: "0 0 * * 0"
    # Send emails for personal tokens which are about to expire
    personal_access_tokens_expiring_worker:
      cron: "0 1 * * *"

    # Remove outdated repository archives
    repository_archive_cache_worker:
      cron: "0 * * * *"

    # Verify custom GitLab Pages domains
    pages_domain_verification_cron_worker:
      cron: "*/15 * * * *"

    # Periodically migrate diffs from the database to external storage
    schedule_migrate_external_diffs_worker:
      cron: "15 * * * *"

    # Update CI Platform Metrics daily
    ci_platform_metrics_update_cron_worker:
      cron: "47 9 * * *"

    # Periodically update ci_runner_versions table with up-to-date versions and status.
    ci_runner_versions_reconciliation_worker:
      cron: "@daily"

    # Periodically clean up stale runner machines.
    ci_runners_stale_machines_cleanup_worker:
      cron: "36 * * * *"

  registry:
    # enabled: true
    # host: registry.example.com
    # port: 5005
    # api_url: http://localhost:5000/ # internal address to the registry, will be used by GitLab to directly communicate with API
    # key: config/registry.key
    # path: shared/registry
    # issuer: gitlab-issuer


  ## Error Reporting and Logging with Sentry
  sentry:
    # enabled: false
    # dsn: https://<key>@sentry.io/<project>
    # clientside_dsn: https://<key>@sentry.io/<project>
    # environment: 'production' # e.g. development, staging, production

  #
  # 2. GitLab CI settings
  # ==========================

  gitlab_ci:
    # Default project notifications settings:

    # The location where build traces are stored (default: builds/). Relative paths are relative to Rails.root
    # builds_path: builds/

  #
  # 3. Auth settings
  # ==========================

  ## LDAP settings
  # You can test connections and inspect a sample of the LDAP users with login
  # access by running:
  #   bundle exec rake gitlab:ldap:check RAILS_ENV=production
  ldap:
    enabled: {{ 'true' if gitlab_ldap_enabled else 'false' }}
    prevent_ldap_sign_in: {{ 'true' if gitlab_ldap_prevent_ldap_sign_in else 'false' }}
    servers:
      main:
        {{ gitlab_ldap_server | to_nice_yaml(indent=2) | trim | indent(8) if gitlab_ldap_server | length > 0 else '' }}

  ## OmniAuth settings
  omniauth:
    # Allow login via Twitter, Google, etc. using OmniAuth providers
    enabled: {{ 'true' if gitlab_omniauth_enabled else 'false' }}

    # Uncomment this to automatically sign in with a specific omniauth provider's without
    # showing GitLab's sign-in page (default: show the GitLab sign-in page)
    # auto_sign_in_with_provider: saml

    # Sync user's profile from the specified Omniauth providers every time the user logs in (default: empty).
    # Define the allowed providers using an array, e.g. ["cas3", "saml", "twitter"],
    # or as true/false to allow all providers or none.
    # When authenticating using LDAP, the user's email is always synced.
    # sync_profile_from_provider: []

    # Select which info to sync from the providers above. (default: email).
    # Define the synced profile info using an array. Available options are "name", "email" and "location"
    # e.g. ["name", "email", "location"] or as true to sync all available.
    # This consequently will make the selected attributes read-only.
    # sync_profile_attributes: true

    # CAUTION!
    # This allows users to login without having a user account first. Define the allowed providers
    # using an array, e.g. ["saml", "twitter"], or as true/false to allow all providers or none.
    # User accounts will be created automatically when authentication was successful.
    allow_single_sign_on: ["saml"]

    # Locks down those users until they have been cleared by the admin (default: true).
    block_auto_created_users: true
    # Look up new users in LDAP servers. If a match is found (same uid), automatically
    # link the omniauth identity with the LDAP account. (default: false)
    auto_link_ldap_user: false

    # Allow users with existing accounts to login and auto link their account via SAML
    # login, without having to do a manual login first and manually add SAML
    # (default: false)
    auto_link_saml_user: false

    # Set different Omniauth providers as external so that all users creating accounts
    # via these providers will not be able to have access to internal projects. You
    # will need to use the full name of the provider, like `google_oauth2` for Google.
    # Refer to the examples below for the full names of the supported providers.
    # (default: [])
    external_providers: []

    ## Auth providers
    # Uncomment the following lines and fill in the data of the auth provider you want to use
    # If your favorite auth provider is not listed you can use others:
    # see https://github.com/gitlabhq/gitlab-public-wiki/wiki/Custom-omniauth-provider-configurations
    # The 'app_id' and 'app_secret' parameters are always passed as the first two
    # arguments, followed by optional 'args' which can be either a hash or an array.
    # Documentation for this is available at http://doc.gitlab.com/ce/integration/omniauth.html
    providers:
{% if gitlab_omniauth_github_app_id is defined %}
      - { name: 'github',
          app_id: '{{ gitlab_omniauth_github_app_id }}',
          app_secret: '{{ gitlab_omniauth_github_app_secret }}',
          url: "https://github.com/",
          verify_ssl: true,
          args: { scope: 'user:email' } }
{% endif %}
{% if gitlab_omniauth_google_oauth2_app_id is defined %}
      - { name: 'google_oauth2',
          app_id: '{{ gitlab_omniauth_google_oauth2_app_id }}',
          app_secret: '{{ gitlab_omniauth_google_oauth2_app_secret }}',
          args: { access_type: 'offline', approval_prompt: '' } }
{% endif %}

    # SSO maximum session duration in seconds. Defaults to CAS default of 8 hours.
    # cas3:
    #   session_duration: 28800

  # Shared file storage settings
  shared:
    # path: /mnt/gitlab # Default: shared

  # Gitaly settings
  gitaly:
    # Default Gitaly authentication token. Can be overridden per storage. Can
    # be left blank when Gitaly is running locally on a Unix socket, which
    # is the normal way to deploy Gitaly.
    token:

  #
  # 4. Advanced settings
  # ==========================

  ## Repositories settings
  repositories:
    storages: # You must have at least a `default` storage path.
      default:
        # TCP connections are supported too (e.g. tcp://host:port). TLS connections are also supported using the system certificate pool (eg: tls://host:port).
        gitaly_address: unix:{{ gitaly_socket_path }}
        # gitaly_token: 'special token' # Optional: override global gitaly.token for this storage.

  ## Backup settings
  backup:
    # Relative paths are relative to Rails.root (default: tmp/backups/)
    path: {{ gitlab_backup_path }}
    gitaly_backup_path: {{ gitlab_gitaly_bin_path }}/gitaly-backup
    # Permissions for the resulting backup.tar file (default: 0600)
    archive_permissions: {{ gitlab_backup_archive_permissions }}
    # default: 0 (forever) (in seconds)
    keep_time: {{ gitlab_backup_keep_time }}
    # default: nil, it means that all schemas will be backed up
    pg_schema: {{ gitlab_backup_pg_schema }}
    # upload:
    #   # Fog storage connection settings, see https://fog.io/storage/ .
    #   connection:
    #     provider: AWS
    #     region: eu-west-1
    #     aws_access_key_id: AKIAKIAKI
    #     aws_secret_access_key: 'secret123'
    #   # The remote 'directory' to store your backups. For S3, this would be the bucket name.
    #   remote_directory: 'my.s3.bucket'
    #   # Use multipart uploads when file size reaches 100MB, see
    #   #  http://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html
    #   multipart_chunk_size: 104857600
    #   # Specifies Amazon S3 storage class to use for backups (optional)
    #   # storage_class: 'STANDARD'
    #   # Turns on AWS Server-Side Encryption with Amazon Customer-Provided Encryption Keys for backups, this is optional
    #   #   'encryption' must be set in order for this to have any effect.
    #   #   'encryption_key' should be set to the 256-bit encryption key for Amazon S3 to use to encrypt or decrypt your data.
    #   # encryption: 'AES256'
    #   # encryption_key: '<key>'
    #   #
    #   # Turns on AWS Server-Side Encryption with Amazon S3-Managed keys (optional)
    #   # https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html
    #   # For SSE-S3, set 'server_side_encryption' to 'AES256'.
    #   # For SS3-KMS, set 'server_side_encryption' to 'aws:kms'. Set
    #   # 'server_side_encryption_kms_key_id' to the ARN of customer master key.
    #   # storage_options:
    #   #   server_side_encryption: 'aws:kms'
    #   #   server_side_encryption_kms_key_id: 'arn:aws:kms:YOUR-KEY-ID-HERE'

  ## GitLab Shell settings
  gitlab_shell:
    path: {{ gitlab_home }}/gitlab-shell/
    authorized_keys_file: {{ gitlab_home }}/.ssh/authorized_keys

    # File that contains the secret key for verifying access for gitlab-shell.
    # Default is '.gitlab_shell_secret' relative to Rails.root (i.e. root of the GitLab app).
    # secret_file: /home/git/gitlab/.gitlab_shell_secret

    # Git over HTTP
    upload_pack: true
    receive_pack: true

    # Git import/fetch timeout, in seconds. Defaults to 3 hours.
    # git_timeout: 10800

    # If you use non-standard ssh port you need to specify it
    # ssh_port: 22

  workhorse:
    # File that contains the secret key for verifying access for gitlab-workhorse.
    # Default is '.gitlab_workhorse_secret' relative to Rails.root (i.e. root of the GitLab app).
    # secret_file: /home/git/gitlab/.gitlab_workhorse_secret

  ## Git settings
  # CAUTION!
  # Use the default values unless you really know what you are doing
  git:
    bin_path: {{ gitlab_git_bin }}

  ## Webpack settings
  # If enabled, this will tell rails to serve frontend assets from the webpack-dev-server running
  # on a given port instead of serving directly from /assets/webpack. This is only indended for use
  # in development.
  webpack:
    # dev_server:
    #   enabled: true
    #   host: localhost
    #   port: 3808

  ## Monitoring
  # Built in monitoring settings
  monitoring:
    # Time between sampling of unicorn socket metrics, in seconds
    # unicorn_sampler_interval: 10
    # IP whitelist to access monitoring endpoints
    ip_whitelist: {{ gitlab_monitoring_ip_whitelist }}

    # Sidekiq exporter is webserver built in to Sidekiq to expose Prometheus metrics
    sidekiq_exporter:
    #  enabled: true
    #  log_enabled: false
    #  address: localhost
    #  port: 8082
    #  tls_enabled: false
    #  tls_cert_path: /path/to/cert.pem
    #  tls_key_path: /path/to/key.pem

    sidekiq_health_checks:
    #  enabled: true
    #  address: localhost
    #  port: 8092

    # Web exporter is a dedicated Prometheus metrics server optionally running alongside Puma.
    web_exporter:
    #  enabled: true
    #  address: localhost
    #  port: 8083
    #  tls_enabled: false
    #  tls_cert_path: /path/to/cert.pem
    #  tls_key_path: /path/to/key.pem

  ## Prometheus settings
  # Do not modify these settings here. They should be modified in /etc/gitlab/gitlab.rb
  # if you installed GitLab via Omnibus.
  # If you installed from source, you need to install and configure Prometheus
  # yourself, and then update the values here.
  # https://docs.gitlab.com/ee/administration/monitoring/prometheus/
  prometheus:
    # enabled: true
    # server_address: 'localhost:9090'
  snowplow_micro:
    enabled: true
    address: '127.0.0.1:9091'

  ## Consul settings
  consul:
    # api_url: 'http://localhost:8500'

  shutdown:
    #  # blackout_seconds:
    #  #   defines an interval to block healthcheck,
    #  #   but continue accepting application requests
    #  #   this allows Load Balancer to notice service
    #  #   being shutdown and not interrupt any of the clients
    #  blackout_seconds: 10

  #
  # 5. Extra customization
  # ==========================

  extra:
    {% if google_analytics_id != '' %}
    ## Google analytics.
    google_analytics_id: '{{ google_analytics_id }}'
    {% endif %}

    ## Bizible.
    # bizible: true

    {% if gitlab_matomo_url is defined and gitlab_matomo_url %}
    ## Matomo analytics.
    matomo_url: '{{ gitlab_matomo_url }}'
    matomo_site_id: '{{ gitlab_matomo_site_id }}'
    matomo_disable_cookies: false
    {% endif %}

    ## Maximum file size for syntax highlighting
    ## https://docs.gitlab.com/ee/user/project/highlighting.html
    # maximum_text_highlight_size_kilobytes: 512

  rack_attack:
    git_basic_auth:
      # Rack Attack IP banning enabled
      # enabled: true
      #
      # Whitelist requests from 127.0.0.1 for web proxies (NGINX/Apache) with incorrect headers
      # ip_whitelist: ["127.0.0.1"]
      #
      # Limit the number of Git HTTP authentication attempts per IP
      # maxretry: 10
      #
      # Reset the auth attempt counter per IP after 60 seconds
      # findtime: 60
      #
      # Ban an IP for one hour (3600s) after too many auth attempts
      # bantime: 3600

development:
  <<: *base

test:
  <<: *base

staging:
  <<: *base
