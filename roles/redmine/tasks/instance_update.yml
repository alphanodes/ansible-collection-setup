---

- name: Set redmine_token_file
  ansible.builtin.set_fact:
    redmine_token_file: "{{ redmine_app_dir }}/config/initializers/secret_token.rb"

- name: Run update
  become: true
  become_user: '{{ redmine_user }}'
  environment:
    RAILS_ENV: '{{ redmine_rails_env }}'
    DB_STATEMENT_TIMEOUT: '0'
  block:
    - name: Manual install latest bundler
      community.general.gem:
        name: bundler
        state: latest

    - name: Run bundler check - {{ instance_name }}
      ansible.builtin.command: bash -lc "bundle check"
      args:
        chdir: '{{ redmine_app_dir }}'
      register: bundler_check_result
      ignore_errors: true
      changed_when: bundler_check_result.rc != 0

    # this is not used anymore, because bundle config is run with every
    # changed bundler check, to update excluded groups
    - name: Check if bundler config file exists - {{ instance_name }}
      ansible.builtin.stat:
        path: '{{ redmine_app_dir }}/.bundle/config'
      register: bundle_config_file

    - name: Set bundle exclude groups - {{ instance_name }}
      ansible.builtin.command: bash -lc "bundle config set --local without {{ instance.bundle_exclude_groups | default(redmine_bundle_exclude_groups) }}"
      args:
        chdir: '{{ redmine_app_dir }}'
      register: bundler_install_result
      changed_when: bundler_install_result.rc != 0
      when: bundler_check_result.rc != 0

    # see https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/main/doc/troubleshooting/ruby.md#gem-install-gpgme-20x-fails-to-compile-native-extension-on-macos-mojave
    - name: Fix ggpme build
      ansible.builtin.command: bash -lc "bundle config build.gpgme --use-system-libraries"
      args:
        chdir: '{{ redmine_app_dir }}'
      register: bundler_gpgme_result
      changed_when: bundler_gpgme_result.rc != 0

    - name: Update gem packages for redmine - {{ instance_name }}
      ansible.builtin.command: bash -lc "bundle update --jobs={{ ansible_processor_nproc }}"
      args:
        chdir: '{{ redmine_app_dir }}'
      register: redmine_gem_result
      changed_when: redmine_gem_result.rc != 0

    - name: Install latest mailcatcher (cannot use Gemfile) - {{ instance_name }}
      community.general.gem:
        name: mailcatcher
        version: '{{ redmine_mailcatcher_version | default(omit) }}'
        state: "{{ 'present' if redmine_mailcatcher_version is defined else 'latest' }}"
      when:
        - instance.with_mailcatcher is defined
        - instance.with_mailcatcher

    # Check obsolete secret token - Start
    - name: Check if secret token file exists - {{ instance_name }}
      ansible.builtin.stat:
        path: '{{ redmine_token_file }}'
      register: token_file

    - name: Obsolete secret token
      when: token_file.stat.exists
      block:
        - name: Check for obsolete secret token - {{ instance_name }}
          ansible.builtin.shell: >
            set -o pipefail &&
            grep -F "secret_key_base" {{ redmine_token_file }} |
            wc -l
          changed_when: false
          register: token_file_valid

        - name: Remove obsolete secret token - {{ instance_name }}
          ansible.builtin.file:
            path: '{{ redmine_token_file }}'
            state: absent
          when: token_file_valid.stdout == "0"

    - name: Ensure redmine secret token exists - {{ instance_name }}
      ansible.builtin.command: bash -lc "bundle exec rake generate_secret_token"
      args:
        chdir: '{{ redmine_app_dir }}'
        creates: '{{ redmine_token_file }}'

    - name: Secure file permissions for secret_token.rb - {{ instance_name }}
      ansible.builtin.file:
        path: '{{ redmine_token_file }}'
        owner: '{{ redmine_user }}'
        group: '{{ redmine_group }}'
        mode: '0640'

    - name: Update redmine core database - {{ instance_name }}
      ansible.builtin.command: bash -lc "{{ instance.update_prefix | default('') }}bundle exec rake db:migrate"
      args:
        chdir: '{{ redmine_app_dir }}'
      notify: Restart puma instance
      register: update_redmine_result
      changed_when: "update_redmine_result.rc != 0"
      when: mysql_replication_role is undefined or mysql_replication_role!='slave'

    - name: Update redmine plugin database - {{ instance_name }}
      ansible.builtin.command: bash -lc "{{ instance.update_prefix | default('') }}bundle exec rake redmine:plugins:migrate"
      args:
        chdir: '{{ redmine_app_dir }}'
      notify: Restart puma instance
      register: update_redmine_result
      changed_when: "update_redmine_result.rc != 0"
      when: mysql_replication_role is undefined or mysql_replication_role!='slave'

    - name: Clear cache - {{ instance_name }}
      ansible.builtin.command: bash -lc "bundle exec rake tmp:cache:clear"
      args:
        chdir: '{{ redmine_app_dir }}'
      notify: Restart puma instance
      register: update_redmine_result
      changed_when: "update_redmine_result.rc != 0"

    - name: Include update post tasks
      ansible.builtin.include_tasks: instance_update_post.yml
