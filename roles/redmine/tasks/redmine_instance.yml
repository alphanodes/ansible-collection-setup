---

- name: Include instance vars
  ansible.builtin.include_tasks: set_instance_vars.yml

- name: Include mysql tasks
  ansible.builtin.include_tasks: instance_mysql.yml
  tags:
    - mysql
  when: >
    redmine_with_mysql
    and (instance.adapter is undefined or instance.adapter=='mysql2')
    and (mysql_replication_role is undefined or mysql_replication_role!='slave')

- name: Include postgresql tasks
  ansible.builtin.include_tasks: instance_postgresql.yml
  tags:
    - postgresql
  when: >
    redmine_with_postgresql
    and instance.adapter is defined
    and instance.adapter=='postgresql'

- name: Install instance git ignore file - {{ instance_name }}
  ansible.builtin.copy:
    src: git_ignore.txt
    dest: '{{ redmine_app_dir }}/.git/info/exclude'
    owner: '{{ redmine_user }}'
    group: '{{ redmine_group }}'
    mode: '0644'

- name: Ensure files directory exists - {{ instance_name }}
  ansible.builtin.file:
    path: '{{ redmine_files_dir }}'
    owner: '{{ redmine_user }}'
    group: '{{ redmine_group }}'
    mode: '0750'
    state: directory

- name: Include init tasks
  ansible.builtin.include_tasks: instance_init.yml

- name: Include config tasks
  ansible.builtin.include_tasks: instance_config.yml

- name: Include config tasks
  ansible.builtin.include_tasks: instance_mysql2postgres.yml
  when:
    - instance.with_mysql2postgres is defined
    - instance.with_mysql2postgres

- name: Include plugin tasks
  ansible.builtin.include_tasks: instance_plugins.yml
  tags:
    - redmine
    - plugin

- name: Include theme tasks
  ansible.builtin.include_tasks: instance_themes.yml
  tags:
    - redmine
    - theme

- name: Include update tasks
  ansible.builtin.include_tasks: instance_update.yml
  tags:
    - redmine
    - update
  when: instance.state is undefined or instance.state!='prepare_only'

- name: Run activate
  when: instance.state is undefined or instance.state!='prepare_only'
  block:
    - name: Check trusted TLS cert
      ansible.builtin.stat:
        path: /etc/ssl/certs/{{ instance.vhost_ssl_cert | default(vhost_ssl_cert) }}_trusted.crt
      register: trusted_cert
      when:
        - nginx_with_ssl
        - instance.letsencrypt_cert is undefined or not instance.letsencrypt_cert

    - name: Set TLS files
      ansible.builtin.set_fact:
        vhost_ssl_with_trusted_cert: "{{ trusted_cert.stat.exists | bool }}"
      when:
        - nginx_with_ssl
        - instance.letsencrypt_cert is undefined or not instance.letsencrypt_cert

    - name: Update redmine vhost configuration - {{ instance_name }}
      ansible.builtin.template:
        src: etc/nginx/sites-available/redmine.j2
        dest: /etc/nginx/sites-available/{{ instance_name }}.conf
        mode: '0644'
      notify: Reload nginx

    - name: Check vhost user are specified for pghero
      when:
        - not access_protection
        - instance.vhost_users is undefined
        - instance.with_pghero is defined
        - instance.with_pghero
      ansible.builtin.fail:
        msg: with_pghero requires to define vhost_users"

    # restart required, because file can be not available before
    - name: Redmine vhost user protection - {{ instance_name }}
      community.general.htpasswd:
        path: '{{ htpasswd_file }}'
        name: '{{ item.user }}'
        password: '{{ item.password }}'
        owner: root
        group: '{{ nginx_group }}'
        mode: '0640'
      loop: '{{ instance.vhost_users | default([]) }}'
      when: instance.vhost_users is defined
      notify: Restart nginx

- name: Remove htpasswd file, if no base auth is in use - {{ instance_name }}
  ansible.builtin.file:
    path: '{{ htpasswd_file }}'
    state: absent
  when: instance.vhost_users is undefined
  notify: Restart nginx

- name: Install redmine robots.txt - {{ instance_name }}
  ansible.builtin.copy:
    src: public/robots.txt
    dest: '{{ redmine_app_dir }}/public/robots.txt'
    owner: '{{ redmine_user }}'
    group: '{{ redmine_group }}'
    mode: '0644'
  when: instance.use_robots_txt_from_redmine is undefined or not instance.use_robots_txt_from_redmine

- name: Cleanup redmine robots.txt - {{ instance_name }}
  ansible.builtin.file:
    path: '{{ redmine_app_dir }}/public/robots.txt'
    state: absent
  when:
    - instance.use_robots_txt_from_redmine is defined
    - instance.use_robots_txt_from_redmine

- name: Include systemd tasks
  ansible.builtin.include_tasks: instance_systemd.yml
  when: instance.state is undefined or instance.state != 'prepare_only'

- name: Include prepare_only tasks
  ansible.builtin.include_tasks: instance_prepare_only.yml
  when:
    - instance.state is defined
    - instance.state == 'prepare_only'
