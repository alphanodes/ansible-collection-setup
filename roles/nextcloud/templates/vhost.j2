{{ ansible_managed | comment }}
# nginx nextcloud configuration

upstream php-handler {
  server unix:{{ php_fpm_base + '-' + instance.with_fpm + '.sock' if instance is defined and instance.with_fpm is defined and instance.with_fpm != 'www' else php_fpm_listen | default('/run/php/php-fpm.sock') }};
}

server {
  listen 443 {{ nginx_ssl_listen_option }};
{% if nginx_with_ipv6 %}
  listen [::]:443 {{ nginx_ssl_listen_option }};
{% endif %}
  server_name {{ nextcloud_vhost_server }};
  root {{ nextcloud_htdocs }};

  {% include 'templates/nginx_ssl.inc.j2' with context %}

  {% if nextcloud_proxy_server != '' -%}

  set_real_ip_from {{ nextcloud_proxy_server }};
  real_ip_header X-Forwarded-For;
  {% endif %}

  fastcgi_buffers 64 8K;
  fastcgi_max_temp_file_size 0;

  error_page 403 /core/templates/403.php;
  error_page 404 /core/templates/404.php;

  # Specify how to handle directories -- specifying `/index.php$request_uri`
  # here as the fallback means that Nginx always exhibits the desired behaviour
  # when a client requests a path that corresponds to a directory that exists
  # on the server. In particular, if that directory contains an index.php file,
  # that file is correctly served; if it doesn't, then the request is passed to
  # the front-end controller. This consistent behaviour means that we don't need
  # to specify custom rules for certain paths (e.g. images and other assets,
  # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
  # `try_files $uri $uri/ /index.php$request_uri`
  # always provides the desired behaviour.
  index index.php index.html /index.php$request_uri;

  # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
  location = / {
      if ( $http_user_agent ~ ^DavClnt ) {
          return 302 /remote.php/webdav/$is_args$args;
      }
  }

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  # Make a regex exception for `/.well-known` so that clients can still
  # access it despite the existence of the regex rule
  # `location ~ /(\.|autotest|...)` which would otherwise handle requests
  # for `/.well-known`.
  location ^~ /.well-known {
      # The following 6 rules are borrowed from `.htaccess`

      location = /.well-known/carddav     { return 301 $scheme://$host/remote.php/dav/; }
      location = /.well-known/caldav      { return 301 $scheme://$host/remote.php/dav/; }
      # Anything else is dynamically handled by Nextcloud
      location ^~ /.well-known            { return 301 $scheme://$host/index.php$uri; }

      try_files $uri $uri/ =404;
  }

  # Enable gzip but do not remove ETag headers
  gzip on;
  gzip_vary on;
  gzip_comp_level 4;
  gzip_min_length 256;
  gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
  gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

  # HTTP response headers borrowed from Nextcloud `.htaccess`
  add_header Referrer-Policy                      "no-referrer"       always;
  add_header X-Content-Type-Options               "nosniff"           always;
  add_header X-Download-Options                   "noopen"            always;
  add_header X-Frame-Options                      "SAMEORIGIN"        always;
  add_header X-Permitted-Cross-Domain-Policies    "none"              always;
  add_header X-Robots-Tag                         "noindex, nofollow" always;
  add_header X-XSS-Protection                     "1; mode=block"     always;

  # Remove X-Powered-By, which is an information leak
  fastcgi_hide_header X-Powered-By;

  # Rules borrowed from `.htaccess` to hide certain paths from clients
  location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
  location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 404; }

  # Ensure this block, which passes PHP files to the PHP process, is above the blocks
  # which handle static assets (as seen below). If this block is not declared first,
  # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
  # to the URI, resulting in a HTTP 500 error response.
  location ~ \.php(?:$|/) {
      fastcgi_split_path_info ^(.+?\.php)(/.*)$;
      set $path_info $fastcgi_path_info;

      try_files $fastcgi_script_name =404;

      include fastcgi_params;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO $path_info;
      fastcgi_param HTTPS on;

      fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
      fastcgi_param front_controller_active true;     # Enable pretty urls
      fastcgi_pass php-handler;

      fastcgi_intercept_errors on;
      fastcgi_request_buffering off;
  }

  location ~ \.(?:css|js|svg|gif)$ {
    try_files $uri /index.php$request_uri;
    expires 6M;         # Cache-Control policy borrowed from `.htaccess`
    access_log off;     # Optional: Don't log access to assets
  }

  location ~ \.woff2?$ {
    try_files $uri /index.php$request_uri;
    expires 7d;         # Cache-Control policy borrowed from `.htaccess`
    access_log off;     # Optional: Don't log access to assets
  }

  location / {
      try_files $uri $uri/ /index.php$request_uri;
  }

  {% include 'templates/nginx_error_handler_static.inc.j2' with context %}

  {% if nextcloud_vhost_includes is defined -%}
  {% for include in nextcloud_vhost_includes -%}
  include {{ include }}.conf;
  {% endfor %}
  {% endif %}

}

server {
  listen 80;
  server_name {{ nextcloud_vhost_server }};

  return 301 https://{{ nextcloud_vhost_server }}$request_uri;
}

{% if nextcloud_redirects is defined -%}
server {
  server_name {{ nextcloud_redirects | join(' ') }};
  listen 80;
  listen 443 {{ nginx_ssl_listen_option }};
{% if nginx_with_ipv6 %}
  listen [::]:80;
  listen [::]:443 {{ nginx_ssl_listen_option }};
{% endif %}

  {% include 'templates/nginx_ssl.inc.j2' with context %}

  return 301 https://{{ nextcloud_vhost_server }}$request_uri;
}
{% endif %}

{% if nextcloud_vhost_for_zabbix %}
{% include 'templates/nginx_monitoring.inc.j2' with context %}
{% endif %}
