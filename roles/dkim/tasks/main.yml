---
# DKIM key generation and management
# Supports multi-domain DKIM with shared group access

- name: Create dkim system group
  ansible.builtin.group:
    name: dkim
    system: true
    state: present

# Support two modes:
# 1. dkim_domain (string) - single domain lookup from dkim_domains dictionary
# 2. dkim_domains (dict) - process all domains from dictionary

- name: Build domain list from dkim_domain lookup (single domain mode)
  when:
    - dkim_domain is defined
    - dkim_domain | length > 0
    - dkim_domains is defined
    - dkim_domain in dkim_domains
  ansible.builtin.set_fact:
    dkim_domains_to_process:
      - domain: "{{ dkim_domain }}"
        selector: "{{ dkim_domains[dkim_domain].selector }}"
        key_size: "{{ dkim_domains[dkim_domain].key_size | default(2048) }}"

- name: Build domain list from dkim_domains dictionary (multi-domain mode)
  when:
    - dkim_domains_to_process is not defined
    - dkim_domains is defined
    - dkim_domains is mapping
  ansible.builtin.set_fact:
    dkim_domains_to_process: |
      {% set result = [] %}
      {% for domain_name, domain_config in dkim_domains.items() %}
      {%   set _ = result.append({
             'domain': domain_name,
             'selector': domain_config.selector,
             'key_size': domain_config.key_size | default(2048)
           }) %}
      {% endfor %}
      {{ result }}

- name: Validate DKIM configuration
  ansible.builtin.fail:
    msg: "No DKIM domains configured. Define dkim_domains dictionary in host_vars."
  when:
    - dkim_domains_to_process is not defined or dkim_domains_to_process | length == 0

- name: Ensure required packages are installed
  ansible.builtin.apt:
    name:
      - openssl
    state: present
    update_cache: false

- name: Create base DKIM directory
  ansible.builtin.file:
    path: "{{ dkim_base_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Include DKIM key generation tasks
  ansible.builtin.include_tasks: "{{ role_path }}/tasks/generate_key.yml"
  loop: "{{ dkim_domains_to_process }}"
  loop_control:
    loop_var: dkim_domain_item
    label: "{{ dkim_domain_item.domain }}"
